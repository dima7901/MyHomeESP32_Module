#include <Arduino.h>
#include <WiFi.h>
#include <Wire.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Adafruit_BME280.h>
#include <Adafruit_Sensor.h>
#include <ArduinoJson.h>
#include <RTClib.h>
// #include <PubSubClient.h>
#include <WebServer.h>
#include <Update.h>
#include <LittleFS.h>
#include <FS.h>

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
#include "globals.h"
#include "sensors.h"
#include "utils.h"           // –î–û–ë–ê–í–ò–¢–¨ –ü–ï–†–ï–î uart_handler
#include "STM32UpDate.h"
#include "uart_handler.h"
#include "telegram_handler.h"
#include "ESP32UpDate.h"
#include "mqtt_handler.h"

void setup() {
  Serial.begin(115200);
  Serial.println("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
  delay(2000);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LittleFS –ü–ï–†–í–û–ô
  if (!LittleFS.begin()) {
    Serial.println("–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LittleFS");
  } else {
    loadSettings();
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ STM32 –µ—Å–ª–∏ –µ—Å—Ç—å
  if (LittleFS.exists("/firmware.bin")) {
    LittleFS.remove("/firmware.bin");
    Serial.println("–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª /firmware.bin");
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UART
  pinMode(rx_conn, OUTPUT);
  pinMode(tx_conn, OUTPUT);
  pinMode(3, OUTPUT);
  digitalWrite(rx_conn, LOW);
  digitalWrite(tx_conn, LOW);
  Serial.println("UART –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C
  Wire.begin(8, 9); // SDA, SCL
  Serial.println("I2C —à–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
  delay(100);

  setupWiFi();
  client.setInsecure();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BME280
  if (!bme.begin(0x76)) {
    Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ BME280 –ø–æ –∞–¥—Ä–µ—Å—É 0x76");
  } else {
    Serial.println("BME280 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RTC
  if (!rtc.begin()) {
    Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ RTC");
    rtcFound = false;
  } else {
    Serial.println("RTC —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    rtcFound = true;
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ UART
  Serial.println("–í–∫–ª—é—á–µ–Ω–∏–µ UART...");
  digitalWrite(rx_conn, HIGH);
  digitalWrite(tx_conn, HIGH);
  delay(100);
  mySerial.begin(115200, SERIAL_8N1, 18, 17);
  Serial.println("UART –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω, —Å–∫–æ—Ä–æ—Å—Ç—å: 115200");

  pinMode(bootPin, OUTPUT);
  pinMode(resetPin, OUTPUT);
  digitalWrite(bootPin, LOW);
  digitalWrite(resetPin, HIGH);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
  // setupMQTT();

  setupWebServer();

  bot.sendMessage(CHAT_ID, "–°—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –¥–æ–º–∞", "");
  delay(10);
  sendCommandList();

  RP_SendNum("settemp", settemp);
  RP_SendNum("settemp1", settemp1);
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
  static unsigned long lastWifiCheck = 0;
  if (WiFi.status() != WL_CONNECTED) {
    if (millis() - lastWifiCheck > 5000) {
      Serial.println("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WiFi...");
      WiFi.begin(ssid, password);
      lastWifiCheck = millis();
    }
  }

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞
  
   static unsigned long lastLedToggle = 0;
  if (millis() - lastLedToggle >= 100) {
    lastLedToggle = millis();
    digitalWrite(3, !digitalRead(3));
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  if (millis() - bot_lasttime > 1000) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    if (numNewMessages > 0) {
      Serial.printf("–ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π Telegram\n", numNewMessages);
      handleNewMessages(numNewMessages);
    }
    bot_lasttime = millis();
  }
  
  // –û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å STM32 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  if (!firmwareUpdateSTMMode) {
    if (millis() - lastSendRP > 2000) {
      sendRP();
      lastSendRP = millis();
    }
    readUartSTM();
    if (ackSettempValue != settemp && millis() - lastSettempSend >= 500) {
      RP_SendNum("settemp", settemp);
      lastSettempSend = millis();
      Serial.print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ settemp STM32: ");
      Serial.println(settemp);
    }
    if (ackSettemp1Value != settemp1 && millis() - lastSettemp1Send >= 500) {
      RP_SendNum("settemp1", settemp1);
      lastSettemp1Send = millis();
      Serial.print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ settemp1 STM32: ");
      Serial.println(settemp1);
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ MQTT (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
  // handleMQTT();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
  httpServer.handleClient();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
  if (rebootRequested && millis() >= rebootTime) {
    Serial.println("–í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É...");
    rebootController();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  if (millis() - lastMemoryCheck > 5000) {
    printMemoryInfo();
    lastMemoryCheck = millis();
  }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ STM32 –æ—Ç–∑—ã–≤–∞–ª—Å—è
  if (millis() - lastSTM32Response > 60000) { // 60 —Å–µ–∫—É–Ω–¥ = 60000 –º—Å
    Serial.println("üîÑ STM32 –Ω–µ –æ—Ç–≤–µ–∂–∞–µ—Ç –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã - –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Ä–µ—Å–µ—Ç!");
    bot.sendMessage(CHAT_ID, "STM32 –Ω–µ –æ—Ç–≤–µ–∂–∞–µ—Ç, –¥–µ–ª–∞—é –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Ä–µ—Å–µ—Ç!", "");
        
        // –î–µ—Ä–≥–∞–µ–º —Ä–µ—Å–µ—Ç STM32
    digitalWrite(resetPin, LOW);
    delay(100);
    digitalWrite(resetPin, HIGH);
  
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    lastSTM32Response = millis();
    bot.sendMessage(CHAT_ID, "STM32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω", ""); 
    Serial.println("‚úÖ –†–µ—Å–µ—Ç STM32 –≤—ã–ø–æ–ª–Ω–µ–Ω");
  }
}
