#include "telegram_handler.h"
#include "globals.h"
#include "sensors.h"
#include "uart_handler.h"
#include "ESP32UpDate.h"
#include "utils.h"  
#include <LittleFS.h>
#include <WiFiClientSecure.h> 

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

void sendClimateData() {
  updateBME280Data();
  String message;
  message.reserve(500);
  message += "–£–ª–∏—á–Ω—ã–π –∫–ª–∏–º–∞—Ç:\n";
  message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
  message += String(bmeT, 0);
  message += " ¬∞C\n";
  message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: ";
  message += String(bmeH, 0);
  message += " %\n";
  message += "–î–∞–≤–ª–µ–Ω–∏–µ: ";
  message += String(bmeP, 0);
  message += " mmHg\n";
  message += "******************\n";
  message += "–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞:\n";
  message += "–£—Å—Ç. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
  message += String(settemp);
  message += " ¬∞C\n";
  message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
  message += String(antT, 0);
  message += " ¬∞C\n";
  message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: ";
  message += String(antH, 0);
  message += " %\n";
  message += "******************\n";
  message += "–ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞:\n";
  message += "–£—Å—Ç. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
  message += String(settemp1);
  message += " ¬∞C\n";
  message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
  message += String(bmeT1, 0);
  message += " ¬∞C\n";
  message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: ";
  message += String(bmeH1, 0);
  message += " %\n";
  message += "******************\n";
  message += "–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ ESP: ";
  message += firmwareVersion;
  message += "\n–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ STM32: ";
  message += stm32ver;
  message += "\n";
  bot.sendMessage(CHAT_ID, message, "");
  Serial.println("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.");
  message = "";
}

void sendCommandList() {
  String keyboardJson = "[[\"üìÖ /–¥–∞—Ç–∞\", \"‚è∞ /—á–∞—Å—ã\"],"
                       "[\"üõÅ /–≤–∞–Ω–Ω–∞—è\", \"üè† /–∫–æ–º–Ω–∞—Ç–∞\"],"
                       "[\"üå° /–∫–ª–∏–º–∞—Ç\", \"üîÑ /—Å–±—Ä–æ—Å\"],"
                       "[\"üîÑ /–æ–±–Ω–æ–≤–∏—Ç—å_ESP\", \"üîÑ /–æ–±–Ω–æ–≤–∏—Ç—å_STM\"]]";
  bot.sendMessageWithReplyKeyboard(CHAT_ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", "", keyboardJson, true);
  Serial.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏");
}

void setTimeFromTelegram(String dateString) {
  if (!rtcFound) {
    bot.sendMessage(CHAT_ID, "RTC –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", "");
    Serial.println("RTC –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
    waitingForDate = false;
    return;
  }
  if (dateString.length() == 12) {
    int day = dateString.substring(0, 2).toInt();
    int month = dateString.substring(2, 4).toInt();
    int year = dateString.substring(4, 6).toInt() + 2000;
    int hour = dateString.substring(6, 8).toInt();
    int minute = dateString.substring(8, 10).toInt();
    int second = dateString.substring(10, 12).toInt();
    rtc.adjust(DateTime(year, month, day, hour, minute, second));
    String response = "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + String(day) + "/" + String(month) + "/" + String(year) + " " + String(hour) + ":" + String(minute) + ":" + String(second);
    bot.sendMessage(CHAT_ID, response, "");
    Serial.println(response);
    waitingForDate = false;
  } else {
    bot.sendMessage(CHAT_ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î–ú–ú–ì–ì–ß–ß–ú–ú–°–°", "");
    Serial.println("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏");
  }
}

void sendCurrentTime() {
  if (!rtcFound) {
    bot.sendMessage(CHAT_ID, "RTC –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", "");
    Serial.println("RTC –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.");
    return;
  }
  DateTime now = rtc.now();
  String timeStr = String(now.day()) + "/" + String(now.month()) + "/" + String(now.year()) + " " + String(now.hour()) + ":" + String(now.minute()) + ":" + String(now.second());
  bot.sendMessage(CHAT_ID, "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + timeStr, "");
  Serial.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + timeStr);
}

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(CHAT_ID);
    String text = bot.messages[i].text;
    Serial.print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram: ");
    Serial.println(text);
    if (waitingForDate) {
      setTimeFromTelegram(text);
    }
    else if (text == "üìÖ /–¥–∞—Ç–∞" || text == "/–¥–∞—Ç–∞") {
      waitingForDate = true;
      bot.sendMessage(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú–ì–ì–ß–ß–ú–ú–°–°", "");
    }
    else if (text == "‚è∞ /—á–∞—Å—ã" || text == "/—á–∞—Å—ã") {
      sendCurrentTime();
    }
    else if (text == "üõÅ /–≤–∞–Ω–Ω–∞—è" || text == "/–≤–∞–Ω–Ω–∞—è") {
      bot.sendMessage(chat_id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 15 –¥–æ 33", "");
      waitingForTemp = true;
    }
    else if (text == "üè† /–∫–æ–º–Ω–∞—Ç–∞" || text == "/–∫–æ–º–Ω–∞—Ç–∞") {
      bot.sendMessage(chat_id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 15 –¥–æ 33", "");
      waitingForTempRest = true;
    }
    else if (text == "üîÑ /—Å–±—Ä–æ—Å" || text == "/—Å–±—Ä–æ—Å") {
       RP_SendCommand("rebootSTM32");
       Serial.println("Telegram: –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É STM32");
       bot.sendMessage(chat_id, "üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É STM32...", "");
}
    else if (text == "rebootSTM") {
       Serial.println("Telegram:  –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ STM32");
       bot.sendMessage(chat_id, "üîÑ  –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ STM32...", "");
       digitalWrite(resetPin, LOW);
       delay(100);
       digitalWrite(resetPin, HIGH);
       bot.sendMessage(chat_id, "STM32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω", "");
    }
    else if (text == "/—Å—Ç–∞—Ä—Ç") {
      bot.sendMessage(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–¥—É...", "");
      sendCommandList();
    }
    else if (waitingForTemp) {
      float temp = text.toFloat();
      if (temp >= 15 && temp <= 33) {
        settemp = temp;
        saveSettings();
        waitingForTemp = false;
        bot.sendMessage(chat_id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–∞–Ω–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + String(temp), "");
        RP_SendNum("settemp", settemp);
      } else {
        bot.sendMessage(chat_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 15 –¥–æ 33", "");
      }
    }
    else if (waitingForTempRest) {
      float temp = text.toFloat();
      if (temp >= 15 && temp <= 33) {
        settemp1 = temp;
        saveSettings();
        waitingForTempRest = false;
        bot.sendMessage(chat_id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + String(temp), "");
        RP_SendNum("settemp1", settemp1);
      } else {
        bot.sendMessage(chat_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 15 –¥–æ 33", "");
      }
    }
    else if (text == "üå° /–∫–ª–∏–º–∞—Ç" || text == "/–∫–ª–∏–º–∞—Ç") {
      sendClimateData();
    }
    else if (text == "üîÑ /–æ–±–Ω–æ–≤–∏—Ç—å_ESP" || text == "/–æ–±–Ω–æ–≤–∏—Ç—å_ESP") {
      bot.sendMessage(chat_id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É ESP? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'", "");
      firmwareUpdateMode = true;
    }
    else if (text == "üîÑ /–æ–±–Ω–æ–≤–∏—Ç—å_STM" || text == "/–æ–±–Ω–æ–≤–∏—Ç—å_STM") {
      bot.sendMessage(chat_id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É STM32? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'", "");
      firmwareUpdateSTMMode = true;
    }
    else if (text == "–¥–∞" && firmwareUpdateMode) {
      enterFirmwareUpdateMode();
    }
    else if (text == "–¥–∞" && firmwareUpdateSTMMode) {
      String url = "http://" + WiFi.localIP().toString() + "/";
      bot.sendMessage(chat_id, "STM32 –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—à–∏–≤–∫–∏.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏:\n" + url, "");
    }
    else if (text == "–Ω–µ—Ç" && firmwareUpdateMode) {
      exitFirmwareUpdateMode();
    }
    else if (text == "–Ω–µ—Ç" && firmwareUpdateSTMMode) {
      firmwareUpdateSTMMode = false;
      bot.sendMessage(chat_id, "STM32 –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—à–∏–≤–∫–∏", "");
    }
    else if (text == "–æ–∫" && firmwareUpdateMode) {
      bot.sendMessage(chat_id, "–ü—Ä–æ—à–∏–≤–∫–∞ ESP —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏: " + String(firmwareVersion), "");
      exitFirmwareUpdateMode();
    }
    else if (text == "–æ–∫" && firmwareUpdateSTMMode) {
      firmwareUpdateSTMMode = false;
      bot.sendMessage(chat_id, "–ü—Ä–æ—à–∏–≤–∫–∞ STM32 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏: " + String(firmwareVersion), "");
    }
  }
}
