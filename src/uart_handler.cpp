#include "uart_handler.h"
#include "globals.h"
#include "sensors.h"
#include "telegram_handler.h"
#include "utils.h"  
#include <LittleFS.h>

//==============–ù–∞—Å—Ç—Ä–æ–π–∫–∏ UART –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å Nextion=====================//
HardwareSerial mySerial(1); // UART1 –¥–ª—è ESP32

const uint8_t RP_End[2] = {0x0D, 0x0A};

void RP_SendString(const char *ID, const char *string) {
  int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer), "%s.txt=\"%s\"", ID, string);
  if (len < sizeof(tempStrBuffer)) {
    mySerial.write((const uint8_t *)tempStrBuffer, len);
    mySerial.write(RP_End, 2);
  }
}

void RP_SendNum(const char *obj, int32_t num) {
  int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer), "%s=%ld", obj, (long)num);
  if (len < sizeof(tempStrBuffer)) {
    mySerial.write((const uint8_t *)tempStrBuffer, len);
    mySerial.write(RP_End, 2);
  }
}

void RP_SendCommand(const char *string) {
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    size_t str_len = strlen(string);
    size_t max_len = sizeof(tempStrBuffer) - 1;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏–Ω—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    size_t copy_len = (str_len < max_len) ? str_len : max_len;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    memcpy(tempStrBuffer, string, copy_len);
    tempStrBuffer[copy_len] = '\0'; // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    mySerial.write((const uint8_t *)tempStrBuffer, copy_len);
    mySerial.write(RP_End, 2);
}

void sendRP() {
  updateBME280Data();
  RP_SendNum("bmeT", (int32_t)bmeT);
  RP_SendNum("bmeH", (int32_t)bmeH);
  RP_SendNum("bmeP", (int32_t)bmeP);
}

void processCommand(char* command) {
  Serial.print("–ë—É—Ñ–µ—Ä : ");
  Serial.println(command);
  if (strncmp(command, "antT=", 5) == 0) antT = atof(command + 5);
  else if (strncmp(command, "antH=", 5) == 0) antH = atof(command + 5);
  else if (strncmp(command, "bmeT1=", 6) == 0) bmeT1 = atof(command + 6);
  else if (strncmp(command, "bmeH1=", 6) == 0) bmeH1 = atof(command + 6);
  else if (strncmp(command, "bmeP1=", 6) == 0) bmeP1 = atof(command + 6);
  else if (strncmp(command, "rebootSTM32_ok", 14) == 0) {
    Serial.println("‚úÖ STM32 –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É");
  
       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    bot.sendMessage(CHAT_ID, "‚úÖ STM32 —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. ESP32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...", "");
  
       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –≤—Ä–µ–º—è —Ä–µ–±—É—Ç–∞ –¥–ª—è ESP32
    rebootRequested = true;
    rebootTime = millis() + 3000; // –†–µ–±—É—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  
  Serial.println("üîÑ ESP32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã");
}
  else if (strncmp(command, "STM32_Status_ok", 15) == 0) {
    lastSTM32Response = millis(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    Serial.println("‚úÖ STM32 –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–±–æ—Ç—É");
}
  else if (strncmp(command, "errorAnt20", 10) == 0) {
    Serial.println("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Ant20");
    bot.sendMessage(CHAT_ID, "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ", "");
}
  else if (strncmp(command, "errorBME280", 11) == 0) {
    Serial.println("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BME280");
    bot.sendMessage(CHAT_ID, "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç–¥—ã—Ö–∞", "");
}
  else if (strncmp(command, "settemp=", 8) == 0) {
  uint8_t newSettemp = atoi(command + 8);
  if (settemp != newSettemp) {
    settemp = newSettemp;
    saveSettings();
    Serial.print("–ë—É—Ñ–µ—Ä : settemp –∏–∑–º–µ–Ω—ë–Ω STM32 -> ESP: ");
    Serial.println(settemp);
    RP_SendNum("settemp_ok", settemp);
    Serial.print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ :settemp_ok=");
    Serial.println(settemp);
    
    // ‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –° –î–ò–°–ü–õ–ï–Ø
    int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer),
                      "üéõÔ∏è –° –î–ò–°–ü–õ–ï–Ø: –í–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ %d ¬∞C\nüå° –¢–µ–∫—É—â–∞—è: %.0f ¬∞C",
                      settemp, antT);
    if (len < sizeof(tempStrBuffer)) {
      bot.sendMessage(CHAT_ID, tempStrBuffer, "");
    }
  }
  ackSettempValue = settemp;
}
  else if (strncmp(command, "settemp1=", 9) == 0) {
  uint8_t newSettemp1 = atoi(command + 9);
  if (settemp1 != newSettemp1) {
    settemp1 = newSettemp1;
    saveSettings();
    Serial.print("–ë—É—Ñ–µ—Ä : settemp1 –∏–∑–º–µ–Ω—ë–Ω STM32 -> ESP: ");
    Serial.println(settemp1);
    RP_SendNum("settemp1_ok", settemp1);
    Serial.print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ :settemp1_ok=");
    Serial.println(settemp1);
    
    // ‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –° –î–ò–°–ü–õ–ï–Ø
    int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer),
                      "üéõÔ∏è –° –î–ò–°–ü–õ–ï–Ø: –ö–æ–º–Ω–∞—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ %d ¬∞C\nüå° –¢–µ–∫—É—â–∞—è: %.0f ¬∞C",
                      settemp1, bmeT1);
    if (len < sizeof(tempStrBuffer)) {
      bot.sendMessage(CHAT_ID, tempStrBuffer, "");
    }
  }
  ackSettemp1Value = settemp1;
}
  else if (strncmp(command, "settemp_st_ok=", 14) == 0) {
    int v = atoi(command + 14);
    ackSettempValue = v;
    if (settemp != v) {
      settemp = v;
      saveSettings();
    }
    Serial.print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç STM32 :settemp_st_ok=");
    Serial.println(v);
    int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer),
                      "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ STM32: %d ¬∞C, —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.0f ¬∞C",
                      v, antT);
    if (len < sizeof(tempStrBuffer)) {
      bot.sendMessage(CHAT_ID, tempStrBuffer, "");
    }
  }
  else if (strncmp(command, "settemp1_st_ok=", 15) == 0) {
    int v = atoi(command + 15);
    ackSettemp1Value = v;
    if (settemp1 != v) {
      settemp1 = v;
      saveSettings();
    }

    Serial.print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç STM32 :settemp1_st_ok=");
    Serial.println(v);
    int len = snprintf(tempStrBuffer, sizeof(tempStrBuffer),
                      "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç–¥—ã—Ö–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ STM32: %d ¬∞C, —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.0f ¬∞C",
                      v, bmeT1);
    if (len < sizeof(tempStrBuffer)) {
      bot.sendMessage(CHAT_ID, tempStrBuffer, "");
    }
  }
  else if (strncmp(command, "stm32ver.txt=", 13) == 0) {
    stm32ver = command + 13;
    Serial.print("–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ STM32: ");
    Serial.println(stm32ver);
  }
}

void readUartSTM() {
  static char localBuffer[256];
  static uint8_t localIndex = 0;
  
  while (mySerial.available()) {
    char c = mySerial.read();
    
    if (c == '\n' || c == '\r') {
      if (localIndex > 0) {
        localBuffer[localIndex] = '\0';
        
        // ‚úÖ –ß–ò–°–¢–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - –±–µ–∑ –∫–æ—Å—Ç—ã–ª–µ–π
        Serial.printf("üì® UART received: %s\n", localBuffer); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        char *command = strtok(localBuffer, "\r\n");
        while (command != NULL) {
          processCommand(command);
          command = strtok(NULL, "\r\n");
        }
        
        localIndex = 0;
      }
    } else if (localIndex < sizeof(localBuffer) - 1) {
      localBuffer[localIndex++] = c;
    } else {
      // –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      Serial.println("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –Æ–ê–†–¢ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω...–°–±—Ä–æ—Å");
      localIndex = 0;
    }
  }
}

